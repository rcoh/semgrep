on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  create_release:
    name: Create the Github Release
    runs-on: ubuntu-latest
    needs: [osx_release]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
      - uses: actions/download-artifact@v1
        with:
          name: sgrep-osx-${{ github.sha }}
          path: sgrep-osx.zip
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./sgrep-osx.zip
          asset_name: sgrep-osx-{{ github.ref }}.zip
          asset_content_type: application/zip
  osx_release:
    name: Build the OSX binaries
    runs-on: macos-latest
    # TODO: this is very similar to the mac-build workflow. Figure out 
    # how to DRY
    steps:
      - name: Install System Deps
        run: brew install opam pkg-config coreutils
      - name: Checkout
        uses: actions/checkout@v2
      - name: OPAM setup
        run: |
          opam init --no-setup --bare;
          opam switch create 4.07.1;
          opam switch 4.07.1;
      - name: OPAM install Deps
        run: eval $(opam env); opam install -y reason dune ocamlfind camlp4 num ocamlgraph json-wheel conf-perl yaml
      - name: Install submodules
        run: git submodule update --init --recursive
      - name: Install pfff
        run: eval $(opam env) && opam install -y ./pfff
      - name: Install and test sgrep
        run: eval $(opam env) && cd sgrep && make all && make test && make install
      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/bin/sgrep-lint-files
          cp ./sgrep/_build/default/bin/main_sgrep.exe artifacts/sgrep
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: sgrep-osx-${{ github.sha }}
          path: artifacts
